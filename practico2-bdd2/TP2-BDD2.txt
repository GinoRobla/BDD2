CREAR BASE DE DATOS
use TP2-BDD2
switched to db TP2-BDD2

AGREGAR LOS DATOS
db.empleados.insertMany([
  { nombre: "Juan", edad: 28, puesto: "Analista" },
  { nombre: "Ana", edad: 22, puesto: "Pasante" },
  { nombre: "Luis", edad: 35, puesto: "Desarrollador" },
  { nombre: "Carla", edad: 40, puesto: "Gerente" },
  { nombre: "Pedro", edad: 31, puesto: "Diseñador UX" }
])

RESPUESTA DE LA CONSOLA
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('681a10f81af6d34c4981dfdb'),
    '1': ObjectId('681a10f81af6d34c4981dfdc'),
    '2': ObjectId('681a10f81af6d34c4981dfdd'),
    '3': ObjectId('681a10f81af6d34c4981dfde'),
    '4': ObjectId('681a10f81af6d34c4981dfdf')
  }
}

ACTUALIZAR EDAD
db.empleados.updateOne({nombre: "Pedro"}, {$set: {edad:33}})

RESPUESTA DE LA CONSOLA
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

ELIMINAR EMPLEADO
db.empleados.deleteOne({puesto:"Pasante"})

RESPUESTA DE LA CONSOLA
{
  acknowledged: true,
  deletedCount: 1
}

--------------------------------------------------------------------------------------------------------------------------

BUSCAR LOS EMPLEADOS QUE TIENEN ENTRE 25 Y 40 AÑOS
db.empleados.find({edad: { $gt: 25, $lte: 40 }})

RESPUESTA DE LA CONSOLA
{
  _id: ObjectId('681a10f81af6d34c4981dfdb'),
  nombre: 'Juan',
  edad: 28,
  puesto: 'Analista'
}
{
  _id: ObjectId('681a10f81af6d34c4981dfdd'),
  nombre: 'Luis',
  edad: 35,
  puesto: 'Desarrollador'
}
{
  _id: ObjectId('681a10f81af6d34c4981dfde'),
  nombre: 'Carla',
  edad: 40,
  puesto: 'Gerente'
}
{
  _id: ObjectId('681a10f81af6d34c4981dfde'),
  nombre: 'Carla',
  edad: 40,
  puesto: 'Gerente'
}

------------------------------------------------------------------------------------------------------------------------------------------

MOSTRAR LOS EMPLEADOS SIN EL ID
db.empleados.find({}, { nombre: 1, puesto: 1, _id: 0 })

RESPUESTA DE LA CONSOLA
{
  nombre: 'Juan',
  puesto: 'Analista'
}
{
  nombre: 'Luis',
  puesto: 'Desarrollador'
}
{
  nombre: 'Carla',
  puesto: 'Gerente'
}
{
  nombre: 'Carla',
  puesto: 'Gerente'
}

------------------------------------------------------------------------------------------------------------------------------------------

AGREGAMOS EL OBJETO DIRECCION A TODOS LOS EMPLEADOS CON SUS PROPIOS CAMPOS (CALLE,CIUDAD,CP)
db.empleados.updateMany({},{ $set: { direccion: { calle: "calle1", ciudad: "ciudad1", codigo_postal: "codigo postal1" }}})

RESPUESTA DE LA CONSOLA
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 4,
  modifiedCount: 4,
  upsertedCount: 0
}

------------------------------------------------------------------------------------------------------------------------------------------


AGRUPAMOS LOS PRODUCTOS Y SUMAMOS LA CANTIDAD PARA VER CUANTOS PRODUCTOS SE VENDIERON
db.ventas.aggregate([{$group: {_id: "$producto", total: { $sum: "$cantidad" }}}])

RESPUESTA DE LA CONSOLA
{
  _id: 'Móvil',
  total: 5
}
{
  _id: 'Laptop',
  total: 3
}
{
  _id: 'Tablet',
  total: 5
}

--------------------------------------------------------------------------------------------------------------------------------------------

CREAMOS UN INDICE DE APELLIDO Y NOMBRE DE LOS CLIENTES
db.clientes.insertMany([
  { nombre: "Laura", apellido: "Gómez", email: "laura@example.com" },
  { nombre: "Carlos", apellido: "Pérez", email: "carlos@example.com" },
  { nombre: "Ana", apellido: "López", email: "ana@example.com" },
  { nombre: "María", apellido: "Gómez", email: "maria@example.com" },
  { nombre: "Jorge", apellido: "Pérez", email: "jorge@example.com" }
])

RESPUESTA DE LA CONSOLA
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('681a20eb1af6d34c4981dfe5'),
    '1': ObjectId('681a20eb1af6d34c4981dfe6'),
    '2': ObjectId('681a20eb1af6d34c4981dfe7'),
    '3': ObjectId('681a20eb1af6d34c4981dfe8'),
    '4': ObjectId('681a20eb1af6d34c4981dfe9')
  }
}

db.clientes.createIndex({ apellido: 1, nombre: 1 })

RESPUESTA DE LA CONSOLA
apellido_1_nombre_1

--------------------------------------------------------------------------------------------------------------------------------------------

CREAMOS LAS DOS COLECCIONES(CURSOS Y ALUMNOS) Y A CADA ALUMNO LO ASIGNAMOS A LOS CURSOS USANDO REFERENCIA
db.cursos.insertMany([
  { nombre: "Matemática" },
  { nombre: "Historia" },
  { nombre: "Programación" }
])

RESPUESTA DE LA CONSOLA
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('681a25e81af6d34c4981dfea'),
    '1': ObjectId('681a25e81af6d34c4981dfeb'),
    '2': ObjectId('681a25e81af6d34c4981dfec')
  }
}

db.alumnos.insertMany([
  {
    nombre: "Juan",
    cursos: [ObjectId("681a25e81af6d34c4981dfea"), ObjectId("681a25e81af6d34c4981dfeb")]
  },
  {
    nombre: "Lucía",
    cursos: [ObjectId("681a25e81af6d34c4981dfec")]
  }
])

RESPUESTA DE LA CONSOLA
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('681a26471af6d34c4981dfed'),
    '1': ObjectId('681a26471af6d34c4981dfee')
  }
}

--------------------------------------------------------------------------------------------------------------------------------------------

USO DE LOOKUP
db.alumnos.aggregate([
  {
    $lookup: {
      from: "cursos",
      localField: "cursos", 
      foreignField: "_id", 
      as: "cursos_info" 
    }
  }
])

RESPUESTA DE LA CONSOLA
{
  _id: ObjectId('681a26471af6d34c4981dfed'),
  nombre: 'Juan',
  cursos: [
    ObjectId('681a25e81af6d34c4981dfea'),
    ObjectId('681a25e81af6d34c4981dfeb')
  ],
  cursos_info: [
    {
      _id: ObjectId('681a25e81af6d34c4981dfea'),
      nombre: 'Matemática'
    },
    {
      _id: ObjectId('681a25e81af6d34c4981dfeb'),
      nombre: 'Historia'
    }
  ]
}
{
  _id: ObjectId('681a26471af6d34c4981dfed'),
  nombre: 'Juan',
  cursos: [
    ObjectId('681a25e81af6d34c4981dfea'),
    ObjectId('681a25e81af6d34c4981dfeb')
  ],
  cursos_info: [
    {
      _id: ObjectId('681a25e81af6d34c4981dfea'),
      nombre: 'Matemática'
    },
    {
      _id: ObjectId('681a25e81af6d34c4981dfeb'),
      nombre: 'Historia'
    }
  ]
}

--------------------------------------------------------------------------------------------------------------------------------------------

Replica los datos en múltiples servidores para alta disponibilidad.

Replica Set: conjunto de nodos con uno primario y varios secundarios.
Reelección automática del primario en caso de fallo.

--------------------------------------------------------------------------------------------------------------------------------------------

CREAMOS UN USUARIO Y LE DAMOS PERMISOS PARA LEER Y ESCRIBIR
db.createUser({
  user: "usuarioApp",
  pwd: "contrasenaSegura123",
  roles: [
    { role: "readWrite", db: "empresa" }
  ]
})

CREAMOS UN BACKUP Y RESTAURAMOS AL BACKUP QUE CREAMOS
mongodump --db empresa --out ~/backups/may2025
mongorestore --db empresa ~/backups/may2025/empresa


